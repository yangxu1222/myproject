!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ITEM_NUM	get_k_maxth.cpp	17;"	d	file:
ITEM_NUM	get_user_sim.cpp	21;"	d	file:
ITEM_NUM	usercf_base.cpp	12;"	d	file:
ITEM_NUM	usercf_netflix.cpp	24;"	d	file:
KNN_KNNBASE_CPP_	usercf_base.cpp	6;"	d	file:
K_NUM	usercf_base.cpp	15;"	d	file:
K_NUM	usercf_netflix.cpp	25;"	d	file:
MAX_RATE	usercf_base.cpp	14;"	d	file:
MAX_RATE	usercf_netflix.cpp	27;"	d	file:
MIN_RATE	usercf_base.cpp	13;"	d	file:
MIN_RATE	usercf_netflix.cpp	26;"	d	file:
PROBE_SET	usercf_base.cpp	17;"	d	file:
PROBE_SET	usercf_netflix.cpp	29;"	d	file:
RATE_SP	get_k_maxth.cpp	15;"	d	file:
RATE_SP	get_user_sim.cpp	19;"	d	file:
RATE_SP	usercf_base.cpp	18;"	d	file:
RATE_SP	usercf_netflix.cpp	30;"	d	file:
SIM_FILE	get_k_maxth.cpp	18;"	d	file:
TRAINING_SET	get_k_maxth.cpp	14;"	d	file:
TRAINING_SET	get_user_sim.cpp	18;"	d	file:
TRAINING_SET	usercf_base.cpp	16;"	d	file:
TRAINING_SET	usercf_netflix.cpp	28;"	d	file:
USER_NUM	get_k_maxth.cpp	16;"	d	file:
USER_NUM	get_user_sim.cpp	20;"	d	file:
USER_NUM	usercf_base.cpp	11;"	d	file:
USER_NUM	usercf_netflix.cpp	23;"	d	file:
biNum	usercf_base.cpp	/^    int    biNum[USER_NUM+1] = {0.0};            \/\/the rating num of every (¥Úπ˝item i∑÷µƒ”√ªß◊‹ ˝)$/;"	m	namespace:userCF	file:
cmp	get_k_maxth.cpp	/^    bool cmp(double a, double b)$/;"	f
get_k_max	get_k_maxth.cpp	/^    float get_k_max(vector<float>& array, int K)$/;"	f
get_k_max_sim	get_k_maxth.cpp	/^    void get_k_max_sim(int K, const char* source="movielens")$/;"	f
get_sim	get_user_sim.cpp	/^double get_sim(int user1, int user2) {$/;"	f
get_sim_matrix	get_user_sim.cpp	/^void get_sim_matrix(const char* source="movielens")$/;"	f
get_user_mean	usercf_base.cpp	/^    void get_user_mean()$/;"	f	namespace:userCF
kmax	usercf_base.cpp	/^    float kmax[USER_NUM+1] = {0};              \/\/k-max array ,the k-max similarity of each user$/;"	m	namespace:userCF	file:
load_k_max	usercf_base.cpp	/^    void load_k_max(float k_max_local[USER_NUM+1], const char* file_name, const char* separator)$/;"	f	namespace:userCF
load_rating	get_user_sim.cpp	/^void load_rating(char * file_path, map<int,short> rate_matrix_v2_local[],const char* separator)$/;"	f
load_sim_matrix	usercf_base.cpp	/^    void load_sim_matrix(float s[USER_NUM+1][USER_NUM+1], const char* sim_file)$/;"	f	namespace:userCF
main	get_k_maxth.cpp	/^int main(int argc, char ** argv)$/;"	f
main	get_user_sim.cpp	/^int main(int argc, char ** argv)$/;"	f
main	usercf_ml.cpp	/^int main(int argc, char ** argv)$/;"	f
main	usercf_netflix.cpp	/^int main(int argc, char ** argv)$/;"	f
mean	get_k_maxth.cpp	/^    float mean = 0.0;                           \/\/mean of all ratings(ÂÖ®Â±ÄÁöÑÂπ≥ÂùáÂÄº)$/;"	v
mean	get_user_sim.cpp	/^float mean = 0.0;                           \/\/mean of all ratings(»´æ÷µƒ∆Ωæ˘÷µ)$/;"	v
mean	usercf_base.cpp	/^    float mean = 0.0;$/;"	m	namespace:userCF	file:
mean_rate	usercf_base.cpp	/^    double mean_rate[USER_NUM+1] = {0.0};             \/\/store the mean rating of each user $/;"	m	namespace:userCF	file:
model	usercf_base.cpp	/^    void model(const char* sim_file, int k_num)$/;"	f	namespace:userCF
predictRate	usercf_base.cpp	/^float predictRate(int user, int item)$/;"	f
probe_row	usercf_base.cpp	/^    vector<testSetNode> probe_row;                            \/\/store test set$/;"	m	namespace:userCF	file:
rate_matrix_v2	get_k_maxth.cpp	/^    map<int,short> rate_matrix_v2[USER_NUM+1];    \/\/use a map to store the sparse rate matrix(‰ΩøÁî®‰∏Ä‰∏™mapÊï∞ÁªÑÂ≠òÂÇ®Á®ÄÁñèÁöÑÊâìÂàÜÁü©Èòµ)$/;"	v
rate_matrix_v2	get_user_sim.cpp	/^map<int,short> rate_matrix_v2[USER_NUM+1];    \/\/use a map to store the sparse rate matrix( π”√“ª∏ˆmap ˝◊È¥Ê¥¢œ° Ëµƒ¥Ú∑÷æÿ’Û)$/;"	v
s	usercf_base.cpp	/^    float s[USER_NUM+1][USER_NUM+1] = {0};     \/\/item-item similarity matrix(user-userœ‡À∆æÿ’Û)$/;"	m	namespace:userCF	file:
userCF	usercf_base.cpp	/^namespace userCF{$/;"	n	file:
w	get_k_maxth.cpp	/^    float w[USER_NUM+1][USER_NUM+1] = {0.0};    \/\/item-item similarity matrix(user-userÁõ∏‰ººÁü©Èòµ)$/;"	v
w	get_user_sim.cpp	/^float w[USER_NUM+1][USER_NUM+1] = {0.0};    \/\/user-user similarity matrix (user-userœ‡À∆æÿ’Û)$/;"	v
